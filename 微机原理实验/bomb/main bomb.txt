0000000000400ee0 <phase_1>:
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi  //esi地址是这个
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>
//调用到这个函数，这个函数就是比较%rsi和%rbp两个寄存器所表示的地址所存储的两个字符串是否相等，相等返回0，
//因而只要知道%esi这个字符串是啥即可，x/s $0x402400，查看$0x402400这个内存里的值
  400eee:	85 c0                	test   %eax,%eax  //调用上一个函数之后的返回值看看是否为0，0的话就ok，否则就bomb
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>
  400ef7:	48 83 c4 08          	add    $0x8,%rsp
  400efb:	c3                   	retq   

0000000000400efc <phase_2>:
  400efc:	55                   	push   %rbp
  400efd:	53                   	push   %rbx
  400efe:	48 83 ec 28          	sub    $0x28,%rsp
  400f02:	48 89 e6             	mov    %rsp,%rsi
  400f05:	e8 52 05 00 00       	callq  40145c <read_six_numbers> //这个就是读取六个数字的函数放在rbp中作为输入，估计密码就是6个数字了
  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp) //比较1和（%rsp）的值，不等就bomb，相等就400f30
  400f0e:	74 20                	je     400f30 <phase_2+0x34>
  400f10:	e8 25 05 00 00       	callq  40143a <explode_bomb>
  400f15:	eb 19                	jmp    400f30 <phase_2+0x34>
  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax //减4，也就是（rsp），一开始是原来的元素1
  400f1a:	01 c0                	add    %eax,%eax //eax值相加
  400f1c:	39 03                	cmp    %eax,(%rbx) //比较2*eax与rbx，下一个数是上一个数的2倍
  400f1e:	74 05                	je     400f25 <phase_2+0x29> //相等就跳到f25
  400f20:	e8 15 05 00 00       	callq  40143a <explode_bomb>
  400f25:	48 83 c3 04          	add    $0x4,%rbx //rbx加4
  400f29:	48 39 eb             	cmp    %rbp,%rbx 
//因为比得是后4位，所以rbp+16时就应该出循环了，所以总共有rbx-4，0，4，8，12，16这六个数字也就正好是输入的六个数字
  400f2c:	75 e9                	jne    400f17 <phase_2+0x1b>//跳回到400f17，这就是一个出循环的判断条件
  400f2e:	eb 0c                	jmp    400f3c <phase_2+0x40>
  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx //这个加4
  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp //这个加18
  400f3a:	eb db                	jmp    400f17 <phase_2+0x1b> //跳回到400f17
  400f3c:	48 83 c4 28          	add    $0x28,%rsp
  400f40:	5b                   	pop    %rbx
  400f41:	5d                   	pop    %rbp
  400f42:	c3                   	retq   

0000000000400f43 <phase_3>:
  400f43:	48 83 ec 18          	sub    $0x18,%rsp
  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx//第二个参数
  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx//第一个参数
  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi//查看后发现是%d %d
  400f56:	b8 00 00 00 00       	mov    $0x0,%eax
  400f5b:	e8 90 fc ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  400f60:	83 f8 01             	cmp    $0x1,%eax//元素输入个数大于1就跳转到400f6a
  400f63:	7f 05                	jg     400f6a <phase_3+0x27>
  400f65:	e8 d0 04 00 00       	callq  40143a <explode_bomb>
  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)
  400f6f:	77 3c                	ja     400fad <phase_3+0x6a>//第一个参数大于7，跳到ad也就是bomb
  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax
  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8) //按输入跳转，这个要打印跳转表，x/8xg 402470 8xg表示打印8个十六进制（x）八个字节
  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax                    //case0  207
  400f81:	eb 3b                	jmp    400fbe <phase_3+0x7b>
  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax                //case2 707
  400f88:	eb 34                	jmp    400fbe <phase_3+0x7b>
  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax                  //case3 256
  400f8f:	eb 2d                	jmp    400fbe <phase_3+0x7b>
  400f91:	b8 85 01 00 00       	mov    $0x185,%eax                  //case4 389
  400f96:	eb 26                	jmp    400fbe <phase_3+0x7b>
  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax
  400f9d:	eb 1f                	jmp    400fbe <phase_3+0x7b>
  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax
  400fa4:	eb 18                	jmp    400fbe <phase_3+0x7b>
  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax
  400fab:	eb 11                	jmp    400fbe <phase_3+0x7b>
  400fad:	e8 88 04 00 00       	callq  40143a <explode_bomb>
  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax
  400fb7:	eb 05                	jmp    400fbe <phase_3+0x7b>
  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax
  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax //输入的第二个参数跟eax一样
  400fc2:	74 05                	je     400fc9 <phase_3+0x86>
  400fc4:	e8 71 04 00 00       	callq  40143a <explode_bomb>
  400fc9:	48 83 c4 18          	add    $0x18,%rsp
  400fcd:	c3                   	retq   

0000000000400fce <func4>:
//x为rdi，y为rsi，z为rdx，t为rax，k为rcx
  400fce:	48 83 ec 08          	sub    $0x8,%rsp
  400fd2:	89 d0                	mov    %edx,%eax //edx=14，即z=14
  400fd4:	29 f0                	sub    %esi,%eax //eax=eax-esi，esi=0，则eax=14，即y=0，t=z-y=14
  400fd6:	89 c1                	mov    %eax,%ecx ，//k=t
  400fd8:	c1 e9 1f             	shr    $0x1f,%ecx //k>>1f ，14<<31,k==0
  400fdb:	01 c8                	add    %ecx,%eax //t=t+k
  400fdd:	d1 f8                	sar    %eax //t>>1,t=7
  400fdf:	8d 0c 30             	lea    (%rax,%rsi,1),%ecx //k=y+t=7
  400fe2:	39 f9                	cmp    %edi,%ecx
  400fe4:	7e 0c                	jle    400ff2 <func4+0x24>//（k=y+t<= x）,就跳转到f2
  400fe6:	8d 51 ff             	lea    -0x1(%rcx),%edx//z=k-1
  400fe9:	e8 e0 ff ff ff       	callq  400fce <func4>//func4
  400fee:	01 c0                	add    %eax,%eax//t=2t
  400ff0:	eb 15                	jmp    401007 <func4+0x39>//return
  400ff2:	b8 00 00 00 00       	mov    $0x0,%eax //t=0
  400ff7:	39 f9                	cmp    %edi,%ecx
  400ff9:	7d 0c                	jge    401007 <func4+0x39>//（k>=x）,return
  400ffb:	8d 71 01             	lea    0x1(%rcx),%esi//y=k+1
  400ffe:	e8 cb ff ff ff       	callq  400fce <func4>//func4
  401003:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax//t=2t+1,然后return
  401007:	48 83 c4 08          	add    $0x8,%rsp
  40100b:	c3                   	retq   //总之，把z=14，y=0，代入，可知，当x==k时，eax为0，即返回值为0，所以x=7

000000000040100c <phase_4>:
  40100c:	48 83 ec 18          	sub    $0x18,%rsp
  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx  /第二个参数
  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx //第一个参数
  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi  //输入格式是%d %d，用x/sb 0x4025cf查看，同上 sb表示字符串   二进制
  40101f:	b8 00 00 00 00       	mov    $0x0,%eax
  401024:	e8 c7 fb ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  401029:	83 f8 02             	cmp    $0x2,%eax
  40102c:	75 07                	jne    401035 <phase_4+0x29>
  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp) //第一个参数要小于等于14，然后就跳转到3a
  401033:	76 05                	jbe    40103a <phase_4+0x2e>
  401035:	e8 00 04 00 00       	callq  40143a <explode_bomb>
  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx //edx=14
  40103f:	be 00 00 00 00       	mov    $0x0,%esi //esi=0
  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi //edi为第一个参数值
  401048:	e8 81 ff ff ff       	callq  400fce <func4>
  40104d:	85 c0                	test   %eax,%eax
  40104f:	75 07                	jne    401058 <phase_4+0x4c> 访问函数func4后返回的eax不为0即可
  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)测试第二个参数是否为0，为0就不炸，所以第二个数必定为0
  401056:	74 05                	je     40105d <phase_4+0x51>
  401058:	e8 dd 03 00 00       	callq  40143a <explode_bomb>
  40105d:	48 83 c4 18          	add    $0x18,%rsp
  401061:	c3                   	retq   

0000000000401062 <phase_5>:
  401062:	53                   	push   %rbx
  401063:	48 83 ec 20          	sub    $0x20,%rsp
  401067:	48 89 fb             	mov    %rdi,%rbx
  40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401071:	00 00 
  401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  401078:	31 c0                	xor    %eax,%eax
  40107a:	e8 9c 02 00 00       	callq  40131b <string_length>//字符串长度
  40107f:	83 f8 06             	cmp    $0x6,%eax//长度要求为6，说明输入的长度为6
  401082:	74 4e                	je     4010d2 <phase_5+0x70>//跳到d2
  401084:	e8 b1 03 00 00       	callq  40143a <explode_bomb>
  401089:	eb 47                	jmp    4010d2 <phase_5+0x70>
////以输入的字符地址的低四位作为索引寻找以0x4024b0为初始地址字符串中的6个字符，作为%rsp+0x10为初始地址的6个字符串
  40108b:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx //%ecx = %rbx + %rax ASCII码值 给%ecx 
  40108f:	88 0c 24             	mov    %cl,(%rsp) //取低八位
  401092:	48 8b 14 24          	mov    (%rsp),%rdx
  401096:	83 e2 0f             	and    $0xf,%edx //取低四位
  401099:	0f b6 92 b0 24 40 00 	movzbl 0x4024b0(%rdx),%edx //%edx = %rdx + 0x4024b0(maduiersnfotvbyl)%edx:%rdx低4位有效，就是以0x4024b0作为初始地址，以rdx作为索引放入edx
  4010a0:	88 54 04 10          	mov    %dl,0x10(%rsp,%rax,1) //%edx低八位存在 0x10 + %rsp + %rax 中
  4010a4:	48 83 c0 01          	add    $0x1,%rax //rax=rax+1
  4010a8:	48 83 f8 06          	cmp    $0x6,%rax //rax!=6则循环
  4010ac:	75 dd                	jne    40108b <phase_5+0x29>
////
  4010ae:	c6 44 24 16 00       	movb   $0x0,0x16(%rsp)
  4010b3:	be 5e 24 40 00       	mov    $0x40245e,%esi //%esi指向从0x40245e内存单元读入的字符串flyers ，使用x/s 0x4025e查看里面的值，发现是flyers
//然后打印x/s 0x4024b0 发现flyers对应的偏移量是0x9、f、e、5、6、7，所以输入的字符串的第四位所对应的偏移就是前面那几个，然后如果加上0x40就能得到
//大写的IONEFG,加上0x60就能得到小写的ionefg
  4010b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi //%rdi指向前面循环中构造好的长度为6的字符串
  4010bd:	e8 76 02 00 00       	callq  401338 <strings_not_equal>
  4010c2:	85 c0                	test   %eax,%eax 
  4010c4:	74 13                	je     4010d9 <phase_5+0x77>  //判断esi和rdi中的字符串是否相等，不相等就bomb
  4010c6:	e8 6f 03 00 00       	callq  40143a <explode_bomb>
  4010cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4010d0:	eb 07                	jmp    4010d9 <phase_5+0x77>
  4010d2:	b8 00 00 00 00       	mov    $0x0,%eax //eax=0
  4010d7:	eb b2                	j
mp    40108b <phase_5+0x29>然后跳到8b
  4010d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4010de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4010e5:	00 00 
  4010e7:	74 05                	je     4010ee <phase_5+0x8c>
  4010e9:	e8 42 fa ff ff       	callq  400b30 <__stack_chk_fail@plt>
  4010ee:	48 83 c4 20          	add    $0x20,%rsp
  4010f2:	5b                   	pop    %rbx
  4010f3:	c3                   	retq   

00000000004010f4 <phase_6>:
  4010f4:	41 56                	push   %r14
  4010f6:	41 55                	push   %r13
  4010f8:	41 54                	push   %r12
  4010fa:	55                   	push   %rbp
  4010fb:	53                   	push   %rbx
  4010fc:	48 83 ec 50          	sub    $0x50,%rsp
  401100:	49 89 e5             	mov    %rsp,%r13
  401103:	48 89 e6             	mov    %rsp,%rsi
  401106:	e8 51 03 00 00       	callq  40145c <read_six_numbers> //可见密码是6个数字
  40110b:	49 89 e6             	mov    %rsp,%r14
  40110e:	41 bc 00 00 00 00    	mov    $0x0,%r12d

  401114:	4c 89 ed             	mov    %r13,%rbp
  401117:	41 8b 45 00          	mov    0x0(%r13),%eax
  40111b:	83 e8 01             	sub    $0x1,%eax //减1
  40111e:	83 f8 05             	cmp    $0x5,%eax//即输入的数字小于等于6
  401121:	76 05                	jbe    401128 <phase_6+0x34>//就能够跳转到28
  401123:	e8 12 03 00 00       	callq  40143a <explode_bomb>

  401128:	41 83 c4 01          	add    $0x1,%r12d//每过一个数就加一
  40112c:	41 83 fc 06          	cmp    $0x6,%r12d
  401130:	74 21                	je     401153 <phase_6+0x5f>//r12d+1//判断是否等于6，为6就是比较完了，完了就跳到下一个环节
  401132:	44 89 e3             	mov    %r12d,%ebx
  401135:	48 63 c3             	movslq %ebx,%rax
  401138:	8b 04 84             	mov    (%rsp,%rax,4),%eax
  40113b:	39 45 00             	cmp    %eax,0x0(%rbp) //比较 %r13 指向的输入数和 第 %ebx 输入数 是否相等，相等就bomb
  40113e:	75 05                	jne    401145 <phase_6+0x51>
  401140:	e8 f5 02 00 00       	callq  40143a <explode_bomb>
  401145:	83 c3 01             	add    $0x1,%ebx
  401148:	83 fb 05             	cmp    $0x5,%ebx
  40114b:	7e e8                	jle    401135 <phase_6+0x41>//判断 %ebx 是否小于等于5，若没有小于等于,跳转135
//该循环判断 %r13 指向的数据和其后输入数不相等
  40114d:	49 83 c5 04          	add    $0x4,%r13//加4，级指向下一个输入数
  401151:	eb c1                	jmp    401114 <phase_6+0x20>
///这个环节就是保证6个数互相之间都不相等且每个数字小于等于，也就是说这六个数字分别是123456的一种排列


///
  401153:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  401158:	4c 89 f0             	mov    %r14,%rax
  40115b:	b9 07 00 00 00       	mov    $0x7,%ecx
  401160:	89 ca                	mov    %ecx,%edx //edx=7
  401162:	2b 10                	sub    (%rax),%edx
  401164:	89 10                	mov    %edx,(%rax) //rax=7-rax
  401166:	48 83 c0 04          	add    $0x4,%rax//地址加4，指向下一个输入数
  40116a:	48 39 f0             	cmp    %rsi,%rax
  40116d:	75 f1                	jne    401160 <phase_6+0x6c>//判断是不是每个元素都减了，总之，该环节作用是用7-每个元素
///


  40116f:	be 00 00 00 00       	mov    $0x0,%esi //置0
  401174:	eb 21                	jmp    401197 <phase_6+0xa3>
  401176:	48 8b 52 08          	mov    0x8(%rdx),%rdx //将 0x8(%rdx) 指向内存单元的内容复制到 %rdx, 即指向链表下一个元素
  40117a:	83 c0 01             	add    $0x1,%eax
  40117d:	39 c8                	cmp    %ecx,%eax //判断是否相等
  40117f:	75 f5                	jne    401176 <phase_6+0x82>  //不相等,继续遍历链表,最终 %rdx 指向链表的第 %ecx 个节点
  401181:	eb 05                	jmp    401188 <phase_6+0x94>
  401183:	ba d0 32 60 00       	mov    $0x6032d0,%edx  //重置链表首地址
  401188:	48 89 54 74 20       	mov    %rdx,0x20(%rsp,%rsi,2)
  40118d:	48 83 c6 04          	add    $0x4,%rsi
  401191:	48 83 fe 18          	cmp    $0x18,%rsi
  401195:	74 14                	je     4011ab <phase_6+0xb7>
  401197:	8b 0c 34             	mov    (%rsp,%rsi,1),%ecx  //将 (%rsp + %rsi) 指向的数据复制到 %ecx
  40119a:	83 f9 01             	cmp    $0x1,%ecx
  40119d:	7e e4                	jle    401183 <phase_6+0x8f>//比较ecx是否<=1,若小于等于,跳转,否则继续执行, 等于1, %edx 直接指向链表首地址
  40119f:	b8 01 00 00 00       	mov    $0x1,%eax //eax=1
  4011a4:	ba d0 32 60 00       	mov    $0x6032d0,%edx  //将 %rdx 指向内存单元 0x6032d0
  4011a9:	eb cb                	jmp    401176 <phase_6+0x82>  //跳转; 
//该循环根据输入数将链表中对应的第输入数个节点的地址复制到 0x20(%rsp) 开始的栈中
///
0x6032d0为链表首地址,链表中每个节点占用16个字节,前8字节保存两个4字字节的整型数,剩余的8个字节存放下个节点地址
(gdb) x/24x 0x6032d0
struct {
    int value;
    int order;
    node* next;
} node;

  4011ab:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx  //将0x20(%rsp)的链表节点地址复制到 %rbx
  4011b0:	48 8d 44 24 28       	lea    0x28(%rsp),%rax  //将 %rax 指向栈中下一个链表节点的地址
  4011b5:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi  //将 %rsi 指向保存的链表节点地址的末尾
  4011ba:	48 89 d9             	mov    %rbx,%rcx
  4011bd:	48 8b 10             	mov    (%rax),%rdx
  4011c0:	48 89 51 08          	mov    %rdx,0x8(%rcx)  //将栈中指向的后一个节点的地址复制到前一个节点的地址位置
  4011c4:	48 83 c0 08          	add    $0x8,%rax  //移动到下一个节点
  4011c8:	48 39 f0             	cmp    %rsi,%rax
  4011cb:	74 05                	je     4011d2 <phase_6+0xde>  //判断6个节点是否遍历完毕
  4011cd:	48 89 d1             	mov    %rdx,%rcx
  4011d0:	eb eb                	jmp    4011bd <phase_6+0xc9>
  4011d2:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)  //该循环按照7减去输入数据的索引重新调整链表
  4011d9:	00 
///
  4011da:	bd 05 00 00 00       	mov    $0x5,%ebp
  4011df:	48 8b 43 08          	mov    0x8(%rbx),%rax   // 将 %rax 指向 %rbx 下一个链表节点
  4011e3:	8b 00                	mov    (%rax),%eax
  4011e5:	39 03                	cmp    %eax,(%rbx)
  4011e7:	7d 05                	jge    4011ee <phase_6+0xfa>   //比较链表节点中第一个字段值的大小,如果前一个节点值大于后一个节点值,跳转
  4011e9:	e8 4c 02 00 00       	callq  40143a <explode_bomb>
  4011ee:	48 8b 5b 08          	mov    0x8(%rbx),%rbx     // 将 %rbx 向后移动,指向栈中下一个链表节点的地址
  4011f2:	83 ed 01             	sub    $0x1,%ebp    
  4011f5:	75 e8                	jne    4011df <phase_6+0xeb>  //判断循环是否结束,该循环判断栈中重新调整后的链表节点是否按照降序排列
  4011f7:	48 83 c4 50          	add    $0x50,%rsp
  4011fb:	5b                   	pop    %rbx
  4011fc:	5d                   	pop    %rbp
  4011fd:	41 5c                	pop    %r12
  4011ff:	41 5d                	pop    %r13
  401201:	41 5e                	pop    %r14
  401203:	c3                   	retq   
//此外，我们先根据打印获得的0x6032d0链表内的数据得知，如果按降序排列应该是345612，那么7减之前就是431265



0000000000401204 <fun7>: //输入的数esi，地址edi
//地址node在rdi，输入的数a在rsi
//这里要注意这个node的结构，是值，然后左子叶，右子叶，这个可以通过 x/128xg 0x6030f0来看一下这个二叉树长啥样
  401204:	48 83 ec 08          	sub    $0x8,%rsp
  401208:	48 85 ff             	test   %rdi,%rdi//地址不空
  40120b:	74 2b                	je     401238 <fun7+0x34>
  40120d:	8b 17                	mov    (%rdi),%edx//node里的值
  40120f:	39 f2                	cmp    %esi,%edx//比较两者大小
  401211:	7e 0d                	jle    401220 <fun7+0x1c>//（val<=x）跳到20
  401213:	48 8b 7f 08          	mov    0x8(%rdi),%rdi//(val>x),rdi=rdi+8，node+8左叶子
  401217:	e8 e8 ff ff ff       	callq  401204 <fun7>//递归
  40121c:	01 c0                	add    %eax,%eax
  40121e:	eb 1d                	jmp    40123d <fun7+0x39>//返回2func
  401220:	b8 00 00 00 00       	mov    $0x0,%eax//eax=0
  401225:	39 f2                	cmp    %esi,%edx //比较大小
  401227:	74 14                	je     40123d <fun7+0x39>//相等返回eax=0
  401229:	48 8b 7f 10          	mov    0x10(%rdi),%rdi//val<x，node=node+10右叶子
  40122d:	e8 d2 ff ff ff       	callq  401204 <fun7>//递归
  401232:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax//eax=2func+1
  401236:	eb 05                	jmp    40123d <fun7+0x39>
  401238:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40123d:	48 83 c4 08          	add    $0x8,%rsp
  401241:	c3                   	retq   
   int fun7( Node *node,int val){
       if(node->value==val)
           return 0;
       else if(node->value>val)
           return 2*fun7(node+8,val);
       else
           return 2*fun7(node+10,val)+1;
   }由于最后结果为2，则之前一个是1，再之前一个是0，也就是node->left->right
left是+8，right是+10
0000000000401242 <secret_phase>:
  401242:	53                   	push   %rbx
  401243:	e8 56 02 00 00       	callq  40149e <read_line>
  401248:	ba 0a 00 00 00       	mov    $0xa,%edx//给后面的strol函数传参，a=10
  40124d:	be 00 00 00 00       	mov    $0x0,%esi//函数<strtol>调用时写为：strtol(char *ch1,char *ch2,int base){}，作用
  401252:	48 89 c7             	mov    %rax,%rdi//是把字符串*ch1当作一个base进制的整数并返回，这里的base=0xa，说明为10进制
  401255:	e8 76 f9 ff ff       	callq  400bd0 <strtol@plt>//把输入的字符串转化为一个当作一个10进制的整数来使用
  40125a:	48 89 c3             	mov    %rax,%rbx//返回值存入寄存器
  40125d:	8d 40 ff             	lea    -0x1(%rax),%eax//eax=eax-1
  401260:	3d e8 03 00 00       	cmp    $0x3e8,%eax//如果eax>0x3e8就爆炸，说明你输入的数要小于等于0x3e8并且这里是无符号比较，所以你的输入还要大于等于1
  401265:	76 05                	jbe    40126c <secret_phase+0x2a>
  401267:	e8 ce 01 00 00       	callq  40143a <explode_bomb>
  40126c:	89 de                	mov    %ebx,%esi//将输入的那个数作为func7的参数
  40126e:	bf f0 30 60 00       	mov    $0x6030f0,%edi//将一个地址也作为func7的参数
  401273:	e8 8c ff ff ff       	callq  401204 <fun7>
  401278:	83 f8 02             	cmp    $0x2,%eax//将函数返回值跟2作比较，如果不等于2就bomb
  40127b:	74 05                	je     401282 <secret_phase+0x40>
  40127d:	e8 b8 01 00 00       	callq  40143a <explode_bomb>
  401282:	bf 38 24 40 00       	mov    $0x402438,%edi
  401287:	e8 84 f8 ff ff       	callq  400b10 <puts@plt>
  40128c:	e8 33 03 00 00       	callq  4015c4 <phase_defused>
  401291:	5b                   	pop    %rbx
  401292:	c3                   	retq   
  401293:	90                   	nop
  401294:	90                   	nop
  401295:	90                   	nop
  401296:	90                   	nop
  401297:	90                   	nop
  401298:	90                   	nop
  401299:	90                   	nop
  40129a:	90                   	nop
  40129b:	90                   	nop
  40129c:	90                   	nop
  40129d:	90                   	nop
  40129e:	90                   	nop
  40129f:	90                   	nop

00000000004015c4 <phase_defused>:
  4015c4:	48 83 ec 78          	sub    $0x78,%rsp
  4015c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4015cf:	00 00 
  4015d1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  4015d6:	31 c0                	xor    %eax,%eax
 //比较内存0x202181(%rip)储存的值与6的大小，这个内存值的变化是由于每一次read_line都会加一，
//这个内存在read_line中我们能看到就是0x603760，可以设置断点再p/x *0x603760看一下每次是不是都加一了
//每次read_line都会加1，完成6次后才有可能出现隐藏关卡
  4015d8:	83 3d 81 21 20 00 06 	cmpl   $0x6,0x202181(%rip)        # 603760 <num_input_strings>
  4015df:	75 5e                	jne    40163f <phase_defused+0x7b> //如果不等于6，结束运行，不会触发<secret_phase>
  4015e1:	4c 8d 44 24 10       	lea    0x10(%rsp),%r8 //传参
  4015e6:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  4015eb:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  4015f0:	be 19 26 40 00       	mov    $0x402619,%esi  //%d %d %s  这是输入的格式
  4015f5:	bf 70 38 60 00       	mov    $0x603870,%edi 
//这应该是我们输入字符串存放的首地址，跟以前一样
//分析可知，这个地址应该就是我们六次输入里面某一次存放输入数据的地址
//所以只要将是哪一次找到，就可以定位入口，利用（gdb）i r
//因而我们逐步观察每一个存放数据的地址，而且根据三个参数的形式其实只要看第三个和第四个函数即可
  4015fa:	e8 f1 f5 ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  4015ff:	83 f8 03             	cmp    $0x3,%eax //三个参数
  401602:	75 31                	jne    401635 <phase_defused+0x71>
  401604:	be 22 26 40 00       	mov    $0x402622,%esi
  401609:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  40160e:	e8 25 fd ff ff       	callq  401338 <strings_not_equal>
//很显然这就是一个字符串比较，那根前面做法一样 ，只要看0x402622即可，里面是DrEvil 
  401613:	85 c0                	test   %eax,%eax
  401615:	75 1e                	jne    401635 <phase_defused+0x71>//不想等就跳过隐藏了
  401617:	bf f8 24 40 00       	mov    $0x4024f8,%edi //传参
  40161c:	e8 ef f4 ff ff       	callq  400b10 <puts@plt>//这里面就是那两句话
  401621:	bf 20 25 40 00       	mov    $0x402520,%edi
  401626:	e8 e5 f4 ff ff       	callq  400b10 <puts@plt>
  40162b:	b8 00 00 00 00       	mov    $0x0,%eax
  401630:	e8 0d fc ff ff       	callq  401242 <secret_phase>
  401635:	bf 58 25 40 00       	mov    $0x402558,%edi
  40163a:	e8 d1 f4 ff ff       	callq  400b10 <puts@plt>
  40163f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  401644:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40164b:	00 00 
  40164d:	74 05                	je     401654 <phase_defused+0x90>
  40164f:	e8 dc f4 ff ff       	callq  400b30 <__stack_chk_fail@plt>
  401654:	48 83 c4 78          	add    $0x78,%rsp
  401658:	c3                   	retq   
  401659:	90                   	nop
  40165a:	90                   	nop
  40165b:	90                   	nop
  40165c:	90                   	nop
  40165d:	90                   	nop
  40165e:	90                   	nop
  40165f:	90                   	nop


000000000040149e <read_line>:
  40149e:	48 83 ec 08          	sub    $0x8,%rsp
  4014a2:	b8 00 00 00 00       	mov    $0x0,%eax
  4014a7:	e8 4d ff ff ff       	callq  4013f9 <skip>
  4014ac:	48 85 c0             	test   %rax,%rax
  4014af:	75 6e                	jne    40151f <read_line+0x81>
  4014b1:	48 8b 05 90 22 20 00 	mov    0x202290(%rip),%rax        # 603748 <stdin@@GLIBC_2.2.5>
  4014b8:	48 39 05 a9 22 20 00 	cmp    %rax,0x2022a9(%rip)        # 603768 <infile>
  4014bf:	75 14                	jne    4014d5 <read_line+0x37>
  4014c1:	bf d5 25 40 00       	mov    $0x4025d5,%edi
  4014c6:	e8 45 f6 ff ff       	callq  400b10 <puts@plt>
  4014cb:	bf 08 00 00 00       	mov    $0x8,%edi
  4014d0:	e8 4b f7 ff ff       	callq  400c20 <exit@plt>
  4014d5:	bf f3 25 40 00       	mov    $0x4025f3,%edi
  4014da:	e8 01 f6 ff ff       	callq  400ae0 <getenv@plt>
  4014df:	48 85 c0             	test   %rax,%rax
  4014e2:	74 0a                	je     4014ee <read_line+0x50>
  4014e4:	bf 00 00 00 00       	mov    $0x0,%edi
  4014e9:	e8 32 f7 ff ff       	callq  400c20 <exit@plt>
  4014ee:	48 8b 05 53 22 20 00 	mov    0x202253(%rip),%rax        # 603748 <stdin@@GLIBC_2.2.5>
  4014f5:	48 89 05 6c 22 20 00 	mov    %rax,0x20226c(%rip)        # 603768 <infile>
  4014fc:	b8 00 00 00 00       	mov    $0x0,%eax
  401501:	e8 f3 fe ff ff       	callq  4013f9 <skip>
  401506:	48 85 c0             	test   %rax,%rax
  401509:	75 14                	jne    40151f <read_line+0x81>
  40150b:	bf d5 25 40 00       	mov    $0x4025d5,%edi
  401510:	e8 fb f5 ff ff       	callq  400b10 <puts@plt>
  401515:	bf 00 00 00 00       	mov    $0x0,%edi
  40151a:	e8 01 f7 ff ff       	callq  400c20 <exit@plt>
  40151f:	8b 15 3b 22 20 00    	mov    0x20223b(%rip),%edx        # 603760 <num_input_strings>
  401525:	48 63 c2             	movslq %edx,%rax
  401528:	48 8d 34 80          	lea    (%rax,%rax,4),%rsi
  40152c:	48 c1 e6 04          	shl    $0x4,%rsi
  401530:	48 81 c6 80 37 60 00 	add    $0x603780,%rsi
  401537:	48 89 f7             	mov    %rsi,%rdi
  40153a:	b8 00 00 00 00       	mov    $0x0,%eax
  40153f:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  401546:	f2 ae                	repnz scas %es:(%rdi),%al
  401548:	48 f7 d1             	not    %rcx
  40154b:	48 83 e9 01          	sub    $0x1,%rcx
  40154f:	83 f9 4e             	cmp    $0x4e,%ecx
  401552:	7e 46                	jle    40159a <read_line+0xfc>
  401554:	bf fe 25 40 00       	mov    $0x4025fe,%edi
  401559:	e8 b2 f5 ff ff       	callq  400b10 <puts@plt>
  40155e:	8b 05 fc 21 20 00    	mov    0x2021fc(%rip),%eax        # 603760 <num_input_strings>
  401564:	8d 50 01             	lea    0x1(%rax),%edx   //就是这里实现了+1 0x603760
  401567:	89 15 f3 21 20 00    	mov    %edx,0x2021f3(%rip)        # 603760 <num_input_strings>
  40156d:	48 98                	cltq   
  40156f:	48 6b c0 50          	imul   $0x50,%rax,%rax
  401573:	48 bf 2a 2a 2a 74 72 	movabs $0x636e7572742a2a2a,%rdi
  40157a:	75 6e 63 
  40157d:	48 89 b8 80 37 60 00 	mov    %rdi,0x603780(%rax)
  401584:	48 bf 61 74 65 64 2a 	movabs $0x2a2a2a64657461,%rdi
  40158b:	2a 2a 00 
  40158e:	48 89 b8 88 37 60 00 	mov    %rdi,0x603788(%rax)
  401595:	e8 a0 fe ff ff       	callq  40143a <explode_bomb>
  40159a:	83 e9 01             	sub    $0x1,%ecx
  40159d:	48 63 c9             	movslq %ecx,%rcx
  4015a0:	48 63 c2             	movslq %edx,%rax
  4015a3:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  4015a7:	48 c1 e0 04          	shl    $0x4,%rax
  4015ab:	c6 84 01 80 37 60 00 	movb   $0x0,0x603780(%rcx,%rax,1)
  4015b2:	00 
  4015b3:	83 c2 01             	add    $0x1,%edx
  4015b6:	89 15 a4 21 20 00    	mov    %edx,0x2021a4(%rip)        # 603760 <num_input_strings>
  4015bc:	48 89 f0             	mov    %rsi,%rax
  4015bf:	48 83 c4 08          	add    $0x8,%rsp
  4015c3:	c3                   	retq

0000000000400bf0 <__isoc99_sscanf@plt>:
  400bf0:	ff 25 92 24 20 00    	jmpq   *0x202492(%rip)        # 603088 <__isoc99_sscanf@GLIBC_2.7>
  400bf6:	68 11 00 00 00       	pushq  $0x11
  400bfb:	e9 d0 fe ff ff       	jmpq   400ad0 <.plt>
   